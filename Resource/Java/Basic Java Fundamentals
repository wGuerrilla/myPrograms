Basic Java Fundamentals 

    Resources
        Youtube - broCode
            Dallas College - COSC 1437
                ChatGpt

public class Main{
    public static void main(String[] args){
        System.out.println("wrldhello");
    }
}
// This is Source Code in a format humans can understand
// Class is a collection of related code within. more details later.
    // Within a class is whats called the main method. without this the code wont run.
// System.out.print();  prints input into system
// System.out.prinln(); THEN, creates a new line. you can also do \n 

public class Main{
    public static void main(String[] args){

        System.out.println("wrldhello");
    }
}
// Scope of Variable
// can it be seen?
// Scope defines the visibility and lifetime of variables.
// Variables can be global (Access throughout the whole progam)  Public 
//  Or local ( Limited through a specific block)                 Private 

// Value/Variable a placeholder for a value that behaves as the value it contains
    x = 123, y = "hi", z = False
    // variables can store numbers, words, or boolean values (T/F)
    data types - boolean, int, double, char, String   // there are 8 data types , we will use 4    !!!! Remember variables =/ datatypes !!!!!!
    size - 1 bit , 4 bytes, 8 bytes, 2 bytes, varies  // how much memory it holds
    PRimitive/                                          // Primitive datatypes - 8 types, stores data, can only hold 1 value, less memory, fast
    REference - PR, PR, PR, PR, RE;                     // Reference datatypes - unlimited(userdefine), stores an address, hold more than 1 value, more memory, slower
    value = true or false, -2billions - 2 billions,       // what each data type does.
            decimal up to 15 digits .0000., single ASCII value,
            "anything"
    // Declaration - Specifying\Creating a variable(datatype) requires us to declare it(variable name).  dataType (variablename);
    int x;
    // Assignment Operator ( = )  Value\Variable - taking the variable and assign it equal to a value                         variable(name) = value;
    x = 123;
    // Initialization - take the datatype followed by a variableName assign it equal to a value;    dataType v(ariablename) = value;
    int x = 123; // You Initialize when after assignment operater. 123. got it ?
// swaping two variables.
    // koolAid - if we have a glass of kool aid in Y, and a glass of Water in X, we need a third Glass to safely switch X and Y WITHOUT storing kool-aid in both values.4
    String x ="water";                  temp = x;   
    String y ="koolAid";                x = y;
    String temp;                        y = temp;

    // you either get kool-aid in both or water everywhere with temp you create a temporary storage.
// Using Scanner to Accept User-Input
// Scanner is found in the java utility package of your library 
    // we need to import it 

    import java.util.Scanner;

    public class Main{
        public static void main(String[] args){ // Preferable to use sc instead of a scannerName
            Scanner sc = new Scaneer(System.in);  // we are performing a litte bit of (OOP)objectOreintedProgramming
            // Ex. asking for a name
            System.out.println("Name;");
            String name = sc.nextLine();    // declare a variable, 4 string; take user input and assign it to a variable \\
            System.out.println("hello" + name);
            System.out.println("Numb;");
            Int oh = sc.nextInt();    // declare a integer variable  BE AWARE  when using nextInt and then going back to a STRING(nextLine)
            System.out.println(oh + "AllIzzWell"); // the programs will skip the user input because of an existing \n  within scanner that is active. (idk ) 
            sc.nextLine(); // scanner will read \n to clear it out do this.
            sc.close(); // it is a good practice to close scanner


        }
    }
// Expressions 
// a combination of operands & operators
// operands is the values, variables, numbers, or different quantities
// operators are the arithmetic sybols ( + , - , * , / , % )  //  ( <= , >= , < , > , ==, != )  a single equal assigns the variable
// // Constant - Valuethat cannot be changed
    fianl double dime = 0.10;
/////////
    Int dead = 10;
    double dead = (double)dead * 3; 
    // TYPE CASTING / use it appropiately.
    // Implcit casting : Automatically by the compilar
    // Explicit casting : DOne explicitly by the programmer using (conversion) operators();
    dead-- , dead++   // subtract/add

// Math Class Expressions
 public class MainP{
    public static void main(String[] args){
        double x = 3.14;
        double y = -10
        // Method 1 - Math.max(x, y) - the larger of two numbers
        // Method 2 - Math.min(x, y) - the lesser of two numbers
        // Method 3 - Math.abs(x) - absolute value
        // Method 4 - Math.sqrt(x) - Square root
        // Method 5 - Math.round(x) - rounded
        // Method 6 - Math.ceil(x) - round up
        // Method 7 - Math.floor(x) - round down
        z = Math.sqrt((x*x)+(y*y)) // be able to manipulate formulas.
    }
 }
 // Generating Random values
 import java.util.Random;

    public class Main{
        public static void main(String[] args){
            // Random can be done Alot of ways. we are going to use
            Math.random() method;
            //ex
            int variableName = (int)(Math.random() * 101); // 101 allows us to get a number from 0 - 100 0;
    }
// If statements
public static Main{
    public static void main(String[] args){
        // If statement makes a TRUE or FALSE LOOP. if TRUE it exits the LOOP.
        // performs a block of code if it's condition evaluataes to true.^
        int age = 18;

        if(age >= 18){ // if true print
            System.out.println("u r grown");
        }else if(age >= 75){// check more then one condition
            System.out.println("wise men"); // if you are trying to get this number then move it to the main if (){};
        }   // otherwise. it would print 18 and the rest of the block gets ignored. since the first statement is true. loops get it?
        else{ // if its false then print
            System.out.println("u r young");
        }
    }
} Remember if( a == b && a == c ) is legal. if( a == b && c) is NOT legal // c needs a comparision.
// File
// class - An abstract representation of file and directory pathnames
import java.io.FIle;
import java.util.Scanner;

public clase Main{
    public static void main(String[] args){
        // detecting to see if you have the file in the same folder.
        File file = new File("fileName.txt");   // constructer Object 
        // what if is located somewhere else?
        File file = new File("C:/Users/Wahab/Desktop/fileName.txt")

        // code from lecture
             File file = new File("example.txt");
             Scanner sc = new Scanner(file);
             while(sc.hasNextLine())
             System.out.println(sc.nextLine());
    }
}
// Breaking it down:
// File → A class in Java from the java.io package that represents a file or directory path.
// file → This is the variable name (object reference). It will hold a reference to the File object.
// new → This is a keyword in Java that creates a new object in memory.
// File("example.txt") → This calls the constructor of the File class and passes "example.txt" as an argument, 
// meaning we are creating a File object representing "example.txt".
// Scanner(file) → Calls the constructor of the Scanner class and passes the file object as an argument, 
// meaning we are setting up the Scanner to read from "example.txt".
// while(sc.hasNextLine())
// This is a while loop that checks if there are more lines left to read in the file.
// while → A looping statement that keeps executing as long as the condition inside () is true.
// sc.hasNextLine() → A method of Scanner that checks if there is another line to read in the file.
// If the file has more lines, it returns true, and the loop continues.
// If no more lines exist, it returns false, and the loop stops.
// sc.nextLine() → A method of Scanner that reads and returns the next line from the file.
// 1- A File object is created to reference "example.txt".
// 2- A Scanner object is created to read the file.
// 3- The while loop checks if there's another line in the file.
// 4- If there is, the line is read and printed.
// 5- The loop continues until all lines are read.


// Flow Control in Java (or Any Programming Language)
    Flow control refers to how a program makes decisions and executes code 
        in a specific order based on conditions, loops, and function calls
        
        Java provides three main types of flow control:

        Sequential Flow → Default execution (line-by-line).
        Selection (Decision-Making) Statements → if, if-else, switch
        Iteration (Looping) Statements → for, while, do-while
        Jump Statements → break, continue, return
// For Loop (Fixed Reps)
    A for loop is used when the number of iterations is known beforehand.
// Loop iteration : Every time the loop runs and executes its statements, 
    // that is one iteration.
//
for (initialization; condition; update){ // EX. (int i = 1 ; i <= 5; i++)  Must use i = iteration
        Initialization → Runs once before the loop starts.
        Condition → Checked before each iteration. If true, the loop runs; otherwise, it stops.
        Update → Changes the loop variable after each iteration.
}
// While Loop (Conditon - Based)
A while loop is used when the number of iterations is not known in advance 
    but depends on a condition.
    
while (condition){
    Condition → Checked before each iteration.
    If true, the loop runs; if false, it stops.
    No automatic update, so you must update the loop variable inside manually.
}
Understand ? let me explain.
    public class WhileLoopExample{
        public static void main(String[] args)
        int = 1;

        while (i <= 5){
            System.out.println("Number: " + i)
            i++ // Increements to avoid infinite 
            ..// increase value iteration by 1 loop. if
            /// this is not place it would remain 1 forever.. looping as long
            /// as the condition is true.
        }
    }
    or 
        public static void main(String[] args){ /// The loop will keep prompting the user
        while(name.isBlank()){  /// to enter a name . if blank it loops under 
            System.out.println("Enter name : "); /// name variable is give by user input
            name = scanner.nextLine();
        }
            System.out.println("Hello " + name);
    }
// Do-While Loop
 do {                                   // Smiliar to while.. 
    System.out.println("Enter name : ");  // it will print the block of code once then check the condition
    name = scanner.nextLine() // rather then the while loop checking the condition first then printing the block of code.
 } while(name.isBlank());
    System.out.println("Hello " + name);
///   Some special keywords to take note.  ////
break; - stops Loop Immediately
 for(int i = 1; i <= 5; i++){
    if (i == 3 ){
        break; // Stop the loop when i == 3 
    }
    System.out.println(i); 1, 2 ,3
 }

 continue; - Skip Current Iteration
 for(int i = 1; i <= 5; i++){
    if (i == 3){
        continue; // Skip this iteration. skips 3 when i == 3.
    }
    System.out.println(i); 1, 2, 4, 5,
 }
///A Function (method) is a block of code that does a specific task. It can:
/// Take inputs (called parameters). parameters are (        ).
/// Return a value (or just perform an action).
/// Be reused multiple times without repeating code.
        public int add( int a, int b){ // visibility dataType variableName(declared dataType)
            return a + b;
        }

/// The name of the function is add, it must return an integer
/// The parameters are two integers a and b.
/// When they get a value, they become arguments.
/// Functions that are not VOID, are giving functions.
        public class Main{
            public static void main(String[] args){
                greet();
            }
            public static void greet(){
                System.out.println("hello");
            }
        }
        Since it doesnt return a value, theres no need for return.
    When to Use return?
    // If a function returns a value, that value should be:
    // Stored in a variable , Used in a condition , Passed into another function
    // KEEP IN MIND : void functions do not return value
            public class Main{
                public static void(String[] args){
                    int sum = add(4,20); // storing result
                    if (sum > 20){
                        System.out.println("bigGeekn")
                    }
                }
                public static int add(int a, int b){
                    return a + b;
                }
            }
// A class is a blueprint that contains methods and variables. In Java, every program must have a class.
// the add() is a method. we can do the same with other operators.
// Code from lecture
class Main{
    // Not static so we need an object to call it.
    public int addNumbers(int a, int b){
        int sum = a + b;  // once it adds. a and b are no longer visible 
        return sum;    // until we return it into sum
        // creating the function
    }
    // now to call the function to main // teacher likes static.
    public static void main(String[] args){
        int num1 = 25; 
        int num2 = 15;
        Main obj = new Main();  // Creating an object. remember new is keyword to creating objects
        int result = obj.addNumbers(num1, num2); // Calling the addNumbers method using the object
        System.out.print.ln("sum is " + sum);
    }
}
// allows program to run with an object 
// what does it look like without object?
class Main {
    // Now static, so we don't need an object to call it
    public static int addNumbers(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        int num1 = 25, num2 = 15;
        
        // Calling the method directly without an object
        int result = addNumbers(num1, num2);
        
        System.out.println("Sum is " + result);
    }
}

// !! static means belonging to the class,
// while non-static means belonging to an object. aka Instance Variables. 
// its not fixed. each object has its own copy
/// String Methods.
    public class Main{
        public static void main(String[] args){
            String name = "bro";
            String nameTwo = "hoee";
            boolean result = name.equals("bro"); //comparing--- keep in mind every word and uppercase has to match.
            int result = name.length(); // how many numbers are in the string in total
            boolean result = name.equalsIgnoreCase("BRO") // Ignores upperCASE lowerCASE. hence da name
            // you can also just
            /// System.out.println(name.compareTo(nameTwo);  which gives 0 for true 1 for false
            /// you can also use IgnoreCase just add it after To .
        /// CODE FROM LECTURE
         if(name.equals(nameTwo)){
            System.out.println("True")} else{
            System.out.println("False")} // Same Concept.
            // if name > nameTwo returns postive value opposite is negative value 
            // if both are same numbers in total it will return 0.
        }
    }
// Arrays and ArrayList

import java.util.ArrayList;
import java.util.Arrays;

class Main{
    public static void main(String[] args){
        int[] Arrays = new int[2]; // Declaring an integer array with a fixed size of 2
        Arrays[0] = 1; // any number to be stored
        Arrays[1] = 2;
        System.out.println(Arrays[0]); 
        int[] myArrays = {1, 2, 3, 4, 5}; // this is a SHORT CUT to the above method.^
        System.out.println(myArrays[0]);  GOT IT 

        // Declaring an ArrayList of  Type Casting <dataTypes> it can only hold objects. 
        ArrayList<Integer> ArrList = new ArrayList<Integer>();
        ArrList.add(1); 
        ArrList.add(2);
        ArrList.add(3);
        System.out.println(ArrList.get(2)); // Access using .get( )
    }
}Arrays → Fixed-size collections of elements of the same type.
ArrayLists → Dynamic lists that can grow and shrink as needed.
import java.util.ArrayList; // Importing ArrayList class
// FOR LOOP  with Arrays. 
        System.out.println("Array Elements:");
        for (int i = 0; i < numbers.length; i++) { 
            System.out.println("Index " + i + ": " + numbers[i]);
        }
        // use appropiate typecasting on dataTypes.
        ArrayList<String> programmingLanguages = new ArrayList<>();

        // Adding 3 words to the ArrayList
        programmingLanguages.add("Java"); 
        programmingLanguages.add("Python"); 
        programmingLanguages.add("C++");

        // Printing all elements using a loop
        System.out.println("ArrayList Elements:");
        for (int i = 0; i < programmingLanguages.size(); i++) {  // you wont know the size for sure because its dynamic
            System.out.println("Index " + i + ": " + programmingLanguages.get(i));
        }
    }
// Arrys as Function Parameters
// This makes it easier to work with multiple values at once instead of passing them individually.
    public class ArrayAsFunction{
        int [] numbers = {1, 2, 3}; // Declare and initialize an array
        printArray(numbers); // Passing the entire array to a function 
    }
    public void printArry(int[] arr){ // This is a method that takess an integer array.
        for(int num : arr){ // Assign num to each loop cycle (3)
            System.out.println(num); // goes through each number ... interesting how we dont have to use int i = 0....
        }
    }
// since void is place we only get values. and return is not needed.
When Should You Use void?
✔ When printing messages (System.out.println(...)).
✔ When modifying variables but not needing a return value.
✔ When performing an action, like updating a database or writing to a file.
/////////////////////////////////////////////////////////////////////////////////
/// ArrayList as Function Parameters
    import java.util.*;
    Array<String> names = new ArrayList<>(); // The <> (diamond operator) means we don’t need to specify String again.
    names.add("Alice");
    names.add("Bob");
    printList(names);

    public static void printList(ArrayList<String> list ) { 
        for (String item : list){System.out.println(item)}; // this outputs the string created above. 
    }
/// Arrays and ArrayList as Return values
public int[] createArray(){ 
    return new int[] {1, 2, 3}; 
}

public static ArrayList<String> createArraylist(){
    ArrayList<String> list = new ArrayList<>();   // we had to add createArrayList(){} function to call it to the main method 
    list.add("Dawg"); 
    list.add("Barks");
    return list; 
}
//////// MAIN METHOD //////
// public static void main(String[] args) {
//        // Calling the method that returns an array
//        int[] numbers = createArray();  // create a name for method
//        
//        // Printing the array elements using a loop
//        System.out.println("Array Elements:");
//        for (int num : numbers) {   // initiating num = for numbers 
//            System.out.println(num); // whereas a string we have to use String name : name : syntax
//        }
//
//        // Calling the method that returns an ArrayList
//        ArrayList<String> words = createArrayList(); 
//        
//        // Printing the ArrayList elements
//        System.out.println("ArrayList Elements:");git
//        for (String word : words) {   // the words and numbers : after the name seems to be from the system.
//            System.out.println(word);
//        }
//    }
////////////////



This one is a handful of information so I do my best for you.

            ///Understanding Classes 
    ///a class is a blueprint for creating objects
/// It defines attributes (fields/variables) and behaviors (methods/functions).
   attribute : (characteristics) Behaviors : (actions)
/// Basically as far as i understand  a class is not an actual object but defines what an object should look like. (characteristics)
    /// Attributes are variables inside a class that holds information about an object.
        public class Dog    {
            String name;    // no dog exists yet it just describe what the  // THIS IS AN ATTRIBUTE
            int age;        // dog will look like. Class blueprint is NOT a real — it’s just a plan.
            String breed;   } // - this is how we store information on the plan. 
            ///Creating an object
    //An object is a real thing made from a class.
/// Dog refers to Dog class 
    public static void main(String[] args) {
        Dog myDog = new Dog(); // myDog is the name of the object
        // everytime you see, new, it creates an object in da computer.
        myDog.name = " buddy" ;  
        myDog.age = 3;  }// connect object with attribute. and assign it.  // THESE ARE ATTRIBUTE ASSIGNMENTS.

// Methods : define what an object can do .
void bark() {
    System.out.println(name + " says Woof! Woof!");
}

//  What are Access Modifiers?
Access modifiers control who can see and use the variables (attributes) and methods (behaviors) of a class.

Think of a house with different rooms:

Public  → Any file can open and edit it.
Private → Only that specific file can access it. password-proctecd only u use it.
Protected  → Files in the same folder or related subfolders can access it.
Default  → Only files in the same folder can open it.
//////////////////////////////////////////////////////////////////////////////////////////
    public class Dog{  // Accessible Anywher on computer.
        private String name; // restricted access within Dog{} // remember this is also called fields
        private int age; 
        private String breed; //  creating a dog object and assigning it will not work since these are private.
// Private attributes can only be accessed through methods inside the class.
        public void setName(String name){  // Use this method. 
            this.name = name; // assign provided value to private attributes.
        }
        public String getName(){
            return name;   // we allow the ability to set the name and get it when we need to ouput.
        }
    public class Main{
        public static void main(Stringp[] args){
            Dog myDog = new Dog();
            myDog.setName("Buddy");
            System.out.println("Dog's Name: " + myDog.getName()); // with this we can access private attributes.
        }
    }
}
// Protectected - if same folder - this code isint necessary.
// if in another folder.
public class Animal { 
    protected String beasts ;  
    protected void makeSound() {
        System.out.println("grr");
    }
}
// 
import folder.javaName; // optional... 
public class Dog extends Animal { // method to access protected.
    public Dog() {
        beasts = "Dog";
    }
}   public void bark(){
    makeSound();
    System.out.println("Woof.")
}  
// Default - default access
class Dog { }
public class Main { public (string[]){  myDog.name =" yapp"}}  // get the picture?



                    /// Constructors
/// a special method that Runs automatically when objects initialize
        /// has the same name as the class. no return type.
// Default Constructor 
// a no-argument constructor provided by Java if no other constructors are defined. can be explictly defined
public Car(){
    make = "Umkown";
    model = " Unkown";
    year = 0;
}
// Dog Class with Constructor.
    public class Dog{
        private String Name;
        private int age;
        private String breed;
        
        public Dog(String name, int age, String breed){
            this.name = name;
            this.age = age;
            this.breed - breed;
        }
    }
     public class(){ } -   Dog myDog = new Dog("Buddy", 3 , " Golden ") // Automatically setting objects directly

// Multiple Constructors( Overloading)
// provide flexibility when creating objects:
    public Dog(String name){    // either by 
        this.name = name;   // create it with a name 
    }
    public Dog(String name, int age){
        this.name = name;   // or also with an age.
        this.age = age;
    }
// Introducing the Car Class
// ex attributes : make , model , year. 
// ex metods : start(), stop()
public class Car{
    private String make;
    private String model;
    private int year;
        public Car(){
            this.make = "n/a";   // defualt code outputed if  = new car () blank
            this.major = "n/a";
            this.year = "n/a";
        }
    // Since the variables are private we need to use get() Set()....
    public Car(String make, String model, int year){
        this.make = make;
        this.model = model;
        this.year = year;
        public string getMake(){
            return " make"+ make;
        }   
        public void setMake(String make){ 
        this.make = make; // this gives us the ability to .setMake later on being able to change.
        }
    }
}
public class (){} - Car myCar = new Car("Toyota", "Camry", 2022)
    System.out.println(myCar.make + " " + myCar.model);

okay.. so  // private - constructor this. - getter return. - setter method for future updates. and Calling class.

// Encapsulation prevents direct access to attributes. We use getter methods to read data and setter methods to modify data safely.
// really helps protect data. 
// Encapsulation process - Declare variables as private , 
// provide public getter and setter methods.

// Unified-Modeling-Language 
UML shows attributes and methods in a class.
//  a visual representation of a design
    // key elements Classes, Attributes , Methods.
private : denoted by - 
public : denoted by + 
protected : denoted by #
        Car
---------------------         // use to plan and visualize projects
- engineStatus:boolean
- fuelLevel:double
----------------
+ startEngine()
+ stopEngine()
+ refuel(amount)
Best practices 
1 - keep Attributes Private
2 - provide necessary get and set
3 - use final for immutable data // final dollar, which a value that cannot change Use FINAL. something not to change
4 - Document methods // do comments

// Abstraction - Hiding complex details, showing only necessary parts.





PRACTICE ACTITVITY (OPTIONAL)
// create a student class with:
// Fields : name, id, gpa.
// Constructor to initialize all fields. 
// Getter and Setter method. 
//Write the code to create and display a student object.
//we can also do a car and make two cars and have them race.
// Logical Operators. 

















chatgpt -- 
Variables - think of them as containers that store data values
    ex. int number = 5; // number is the variable that holds integer values
Methods - Blocks of code that perform specific tasks and can be called when needed.
    ex. public void greet(){
        System.out.println("hello world.")
    }
Object-Oriented Programming (OOP) Concepts
Java is a object-oriented programming language.
which means it uses objects to model real-world entitties.
dont get it ? Classes and Objects 
Class : A blueprint for creating objects. it defines attributes(variables) and behaviors(methods).
Objects: An instance of a class. It has its own state and can perform behaviors defined by its class.
    ex. public class Unkown{
        //Attributes 
        String color;
        String model;
        //Method
        public void Beast(){
            System.out.println("The Guerrilla on Da MOVE")
        }
    }
    //Creating an object
    Guerrilla myBeast = new Unkown();
    myBeast.color = "darkPurple";
    myBeast.weight = "300Ibs";
    myBeast.move();
Inheritance : A mechanism where one class(subclass) inherits attributes and methods
  // OPTIONAL : GENERATING RANDOM.
                //Random variableName = new Random();  // dataType variableName remember?
                //int x = variableName.nextInt();
                // understanding that if you want a number from 0 - 6... nextInt(7)
                //double y = variableName.nextDouble();
                // Manipulate as need for each dataType 
            }
// Graphical User Interface
// we the to impo+
import from library.;
import javax.swing.JOptionPane;

public class Main{
    public static void main(String[] args){
        String name = JOptionPane.showInputDialog(" blah "); // we need user input stored a string variable
        JOptionPane.showMessageDialog(null, " hi " + name); // show output of user input // 
        int ah = Integer.parseInt // when using dataType use the Apporiate Assignment to Intialize ?
           (JOptionPane.ShowInputDIalogBox(" aaa"))
         
    }
}
// Switches (Efficent If statement) 
// a statement that allows a variable to be tested for equality against a list of values, it cane execute a number of possible paths.
public class Main{
    public static void main(String[] args)
    String day ="Jummah"; // this is our first case. we are going to be using this to compare to the case..
    switch(day) { // manipulates any dataType
        case "yak" : System.out.println(" kho "); // case variableName : if there is a match what do you want to do ? 
        break;
        case "doo" : System.out.println(" kho ");
        break;
        // breaks off the code. why its important?
        // it prints all the code if not placed.
        default : System.out.println("chi meehgee");
        // if not is conditions is true then. it prints this. 
    }
}
